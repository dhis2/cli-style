#!/usr/bin/env node

// built-ins
const path = require('path')
const fs = require('fs')

// support crew
const { collectFiles } = require('./lib/files.js')
const log = require('./lib/log.js')

// heavy lifters
const prettify = require('./lib/prettier.js')
const stage = require('./lib/git.js')
const configure = require('./lib/config.js')

function exit(code) {
    process.exit(code)
}

function cwd() {
    try {
        const nodeModulePath = path.join(
            repoDir,
            'node_modules',
            '@dhis2',
            'code-style'
        )
        fs.accessSync(nodeModulePath)
        return nodeModulePath
    } catch (err) {
        return process.cwd()
    }
}

/**
 * `repoDir`   - points to the repo which needs to be formatted
 * `dir`       - points to the code-style package in node_modules, and
 *               if it doesn't exist, use the `cwd`
 * `codeDir`   - root directory for the code to format
 * `codeFiles` - files to format from `codeDir`
 */
const repoDir = process.cwd()
const dir = cwd()
const codeDir = path.join(repoDir)
const codeFiles = collectFiles(codeDir)

// debug information about the folders
log.debug('repoDir?', repoDir)
log.debug('dir?', dir)
log.debug('codeDir?', codeDir)
log.debug('codeFiles?', codeFiles)

const pretty = prettify(dir, codeFiles)

log.debug('Pretty?', pretty)

configure(dir, repoDir)

if (pretty) {
    const staged = stage(codeDir)
    staged === 0
        ? log.info('Staging files OK...')
        : log.info('Staging files FAILED...')
} else {
    log.error(
        'Code is not pretty, manual intervention required.'
    )
    exit(1)
}

log.info('Code style complete.')
exit(0)
